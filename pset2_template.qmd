---
title: "30538 Problem Set 2: Parking Tickets"

author: "Regina Hou"
date: "Oct.19,2024"
format: html
execute:
  eval: true
  echo: true
  
---

1. "This submission is my work alone and complies with the 30538 integrity
policy." Add your initials to indicate your agreement: \*\*\R\H\*\*
1. "I have uploaded the names of anyone I worked with on the problem set **[here](https://docs.google.com/forms/d/1-zzHx762odGlpVWtgdIC55vqF-j3gqdAp6Pno1rIGK0/edit)**"  \*\*\_\_\*\* (1 point)
2. Late coins used this pset: \*\*\_\_*\* Late coins left after submission: \*\*\_\_*\*
3. Knit your `ps2.qmd` to make `ps2.pdf`. 
    * The PDF should not be more than 25 pages. Use `head()` and re-size figures when appropriate. 
4. Push  `ps2.qmd` and `ps2.pdf` to your github repo. It is fine to use Github Desktop.
5. Submit `ps2.pdf` via Gradescope (4 points) 
6. Tag your submission in Gradescope

```{python}
import pandas as pd
import altair as alt
alt.renderers.enable("png")
import time

import warnings 
warnings.filterwarnings('ignore')
```

## Data cleaning continued (15 points)

1.  
```{python}
df = pd.read_csv('/Users/hkkkkk/Documents/GitHub/Python2/problem_sets/ps1/data/parking_tickets_one_percent.csv')

def count_na(df):

    result = pd.DataFrame({
        'Variable': df.columns,
        'NA_Count': df.isna().sum().values
    })
    return result

na_summary = count_na(df)
print(na_summary)
```
2. 
zipcode, notice_level, and hearing_disposition have higher frenquency of missing. 
Based on the reading, there are a lot of tickets issued outside their residential areas, so it is hard to get the accurate zipcode; 
The notice level refer to stages of notifications sent to the vehicle owner. Not all tickets may have reached a notice stage, especially if they are recent or resolved promptly before a notice needed to be sent;
This also lead to the missing values in the hearing_discription.The majority of tickets may not lead to a hearing if they are paid promptly or not disputed. 

3. 
The old violation code is: 0964125
The cost of an initial offense used to be around $120 for a vehicle missing a city sticker.
The new violation code is: 0976170 OR 0964125B
After the changes, the fine increased to $200 for a vehicle missing a city sticker.

4. The initial offense under the old violation code is $120; the initial offense under the new violation code is $200

## Revenue increase from "missing city sticker" tickets (35 Points)
1. 
```{python}
df['combined_code'] = df['violation_code'].replace({
    '0964125': 'CitySticker',
    '0964125B': 'CitySticker'
})

df['issue_date'] = pd.to_datetime(df['issue_date'], errors='coerce')

city_sticker_tickets = df[df['combined_code'] == 'CitySticker']

city_sticker_tickets_by_month = city_sticker_tickets.groupby(city_sticker_tickets['issue_date'].dt.to_period('M')).size().reset_index(name='ticket_count')

city_sticker_tickets_by_month['issue_date'] = city_sticker_tickets_by_month['issue_date'].dt.to_timestamp()

chart = alt.Chart(city_sticker_tickets_by_month).mark_line().encode(
    x='issue_date:T',
    y='ticket_count:Q',
    tooltip=['issue_date:T', 'ticket_count:Q']
).properties(
    title='Number of Missing City Sticker Tickets Over Time'
)

chart.show()
```

2. 
```{python}
city_sticker_by_month = city_sticker_tickets.groupby(city_sticker_tickets['issue_date'].dt.to_period('M')).size().reset_index(name='ticket_count')

city_sticker_by_month['issue_date'] = city_sticker_by_month['issue_date'].dt.to_timestamp()

chart = alt.Chart(city_sticker_by_month).mark_line().encode(
    x=alt.X('issue_date:T', 
            axis=alt.Axis(format='%Y-%m',  
                          labelAngle=-45,  
                          tickCount='month',
                          title='Month of Issue')
           ),
    y='ticket_count:Q',
    tooltip=['issue_date', 'ticket_count']
).properties(
    title='Number of Missing City Sticker Tickets Over Time'
)

chart.show()
```
I used Altair's TimeUnit Transform Documentation: https://altair-viz.github.io/user_guide/transform/timeunit.html; and Altair's Axis Labels Documentation: https://altair-viz.github.io/user_guide/customization.html#axis-labels. 

3. 
```{python}
city_sticker_tickets_prior = city_sticker_tickets[(city_sticker_tickets['issue_date'] >= '2012-02-25') &                                (city_sticker_tickets['issue_date'] < '2013-01-01')]

num_tickets_prior = len(city_sticker_tickets_prior)
old_price = 120 
new_price = 200 

revenue_before = num_tickets_prior * old_price
revenue_after = num_tickets_prior * new_price
revenue_increase = (revenue_after - revenue_before) * 100 

print(f"Projected revenue increase: ${revenue_increase:.2f}")
```
Projected revenue increase: $15816000.00

4. 
```{python}
tickets_2012 = city_sticker_tickets[(city_sticker_tickets['issue_date'] >= '2012-02-25') & (city_sticker_tickets['issue_date'] < '2013-01-01')]
tickets_2013 = city_sticker_tickets[city_sticker_tickets['issue_date'].dt.year == 2013]

tickets_2012['paid'] = tickets_2012['total_payments'] > 0
num_tickets_2012 = len(tickets_2012)
num_paid_2012 = tickets_2012['paid'].sum()
repayment_rate_2012 = num_paid_2012 / num_tickets_2012

tickets_2013['paid'] = tickets_2013['total_payments'] > 0
num_tickets_2013 = len(tickets_2013)
num_paid_2013 = tickets_2013['paid'].sum()
repayment_rate_2013 = num_paid_2013 / num_tickets_2013

print(f"Repayment Rate in 2012 (Feb 25 onwards): {repayment_rate_2012:.2%}")
print(f"Repayment Rate in 2013: {repayment_rate_2013:.2%}")

old_price = 120 
new_price = 200  
revenue_before = num_tickets_2012 * repayment_rate_2012 * old_price

revenue_after = num_tickets_2012 * repayment_rate_2013 * new_price  

revenue_change = (revenue_after - revenue_before) * 100  

print(f"Projected Change in Revenue: ${revenue_change:,.2f}")
```
5. 
```{python}
city_sticker_tickets['month'] = city_sticker_tickets['issue_date'].dt.to_period('M')

city_sticker_tickets['paid'] = city_sticker_tickets['total_payments'] > 0

monthly_repayment = city_sticker_tickets.groupby('month').agg(
    total_tickets=('combined_code', 'size'),
    tickets_paid=('paid', 'sum')
).reset_index()

monthly_repayment['repayment_rate'] = monthly_repayment['tickets_paid'] / monthly_repayment['total_tickets']

monthly_repayment['month'] = monthly_repayment['month'].dt.to_timestamp()

repayment_rate_chart = alt.Chart(monthly_repayment).mark_line().encode(
    x=alt.X('month:T', title='Month'),
    y=alt.Y('repayment_rate:Q', title='Repayment Rate'),
    tooltip=['month', 'repayment_rate']
).properties(
    title='Repayment Rates for Missing City Sticker Tickets'
)

policy_change_date = pd.to_datetime('2012-02-25')
policy_change_line = alt.Chart(pd.DataFrame({'policy_change': [policy_change_date]})).mark_rule(color='red').encode(
    x='policy_change:T'
)

final_chart = repayment_rate_chart + policy_change_line

final_chart.show()
```
Before the policy changed, the repayment rate fluctuates significantly but generally remains between 0.5 and 0.6. However, after the Feb 2012 when the policy changed, the  the repayment rate begins to decline steadily over the next several years, and there is a significant drop of the repayment rate by 2018. 

6. 
```{python}
df['paid'] = df['total_payments'] > 0
violation_stats = df.groupby(['violation_code', 'violation_description']).agg(
    total_tickets=('violation_code', 'size'),
    tickets_paid=('paid', 'sum')
).reset_index()

violation_stats['repayment_rate'] = violation_stats['tickets_paid'] / violation_stats['total_tickets']

top_violations = violation_stats.sort_values(by=['total_tickets', 'repayment_rate'], ascending=[False, False]).head(3)

violation_chart = alt.Chart(violation_stats).mark_circle(size=60).encode(
    x=alt.X('total_tickets:Q', title='Total Tickets Issued'),
    y=alt.Y('repayment_rate:Q', title='Repayment Rate'),
    color=alt.condition(
        alt.FieldOneOfPredicate(field='violation_code', oneOf=top_violations['violation_code'].tolist()),
        alt.value('red'),  
        alt.value('blue')  
    ),
    tooltip=['violation_code', 'total_tickets', 'repayment_rate']
).properties(
    title='Violation Types: Total Tickets Issued vs. Repayment Rate'
)

violation_chart.show()

print("Top 3 Violation Types to Increase Prices:")
print(top_violations[['violation_code', 'violation_description', 'total_tickets', 'repayment_rate']])

print(top_violations)
```
Because those three violation types have high number of total ticket issued, and have relatively high repayment rate. Therefore, those three types are more likely to get more revenue by increasing the prices. 

## Headlines and sub-messages (20 points)

1. 
```{python}
violation_summary = df.groupby('violation_description').agg(
    total_tickets=('violation_description', 'size'),
    tickets_paid=('paid', 'sum')
).reset_index()

violation_summary['repayment_rate'] = violation_summary['tickets_paid'] / violation_summary['total_tickets']

violation_summary_sorted = violation_summary.sort_values(by='total_tickets', ascending=False)

top_5_violations = violation_summary_sorted.head(5)

print("Top 5 Most Common Violation Descriptions:")
print(top_5_violations[['violation_description', 'repayment_rate', 'total_tickets']])

```
2. 
```{python}
violation_summary['repayment_rate'] = violation_summary['tickets_paid'] / violation_summary['total_tickets']

violation_summary_filtered = violation_summary[violation_summary['total_tickets'] >= 100]
#scatter plot 
scatter_plot = alt.Chart(violation_summary_filtered).mark_circle(size=60).encode(
    x=alt.X('total_tickets:Q', title='Total Tickets Issued'),
    y=alt.Y('repayment_rate:Q', title='Repayment Rate'),
    tooltip=['violation_description', 'total_tickets', 'repayment_rate']
).properties(
    title='Relationship Between Total Tickets Issued and Repayment Rate'
)
scatter_plot.show()

#bar plot 
bar_plot = alt.Chart(violation_summary_filtered).mark_bar().encode(
    x=alt.X('violation_description:N', sort='-y', title='Violation Description'),
    y=alt.Y('repayment_rate:Q', title='Repayment Rate'),
    tooltip=['violation_description', 'total_tickets', 'repayment_rate']
).properties(
    title='Bar Plot of Repayment Rate by Violation Description'
)
bar_plot.show()

#heatmap 
heatmap = alt.Chart(violation_summary_filtered).mark_rect().encode(
    x=alt.X('total_tickets:Q', title='Total Tickets Issued'),
    y=alt.Y('repayment_rate:Q', title='Repayment Rate'),
    color=alt.Color('repayment_rate:Q', scale=alt.Scale(scheme='blues'), title='Repayment Rate'),
    tooltip=['violation_description', 'total_tickets', 'repayment_rate']
).properties(
    title='Heatmap of Total Tickets vs Repayment Rate'
)
heatmap.show()
```
3. 
If the City Clerk only look at one plot, I would bring the scatter polt to them because it is the simplest and most clearly shown the level of total tickets issued and the repayment rate. Also, it shows the correlation between the two variables without any further explaination or any scales. 
    
## Understanding the structure of the data and summarizing it (Lecture 5, 20 Points)

1. 
```{python}
df['fine_ratio'] = df['fine_level2_amount'] / df['current_amount_due']

common_violations = df.groupby('violation_code').filter(lambda x: len(x) >= 100)

# Step 3: Find violations where the fine does not double (i.e., fine_ratio != 2)
violations_no_double = common_violations[common_violations['fine_ratio'] != 2]

# Step 4: Group by violation code and calculate the average increase
violation_fine_increase = violations_no_double.groupby('violation_code').agg(
    total_citations=('violation_code', 'size'),
    avg_initial_fine=('current_amount_due', 'mean'),
    avg_unpaid_fine=('fine_level2_amount', 'mean'),
    avg_increase=('fine_ratio', 'mean')
).reset_index()

# Display the violations where fines do not double and the average increase
print("Violations where fines do not double and their average increase:")
print(violation_fine_increase)
```
No, some violation types increase but not double. 
2. 
```{python}

```
## Extra Credit (max 5 points)

1. 
2. 
